{"pageProps":{"id":"home","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h6: \"h6\",\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    em: \"em\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Hero, FeatureSummary, Content, Spacer, Image, Gallery, Footer} = _components;\n  if (!Content) _missingMdxReference(\"Content\", true);\n  if (!FeatureSummary) _missingMdxReference(\"FeatureSummary\", true);\n  if (!Footer) _missingMdxReference(\"Footer\", true);\n  if (!Gallery) _missingMdxReference(\"Gallery\", true);\n  if (!Hero) _missingMdxReference(\"Hero\", true);\n  if (!Image) _missingMdxReference(\"Image\", true);\n  if (!Spacer) _missingMdxReference(\"Spacer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Hero, {\n      video: \"/assets/videos/jesse_dance.mp4\",\n      overlay: true,\n      fullHeight: true,\n      children: _jsxs(FeatureSummary, {\n        children: [_jsx(_components.h1, {\n          children: \"Animated Drawings\"\n        }), _jsx(_components.h6, {\n          children: \"Create animations starring your own drawn characters. This is an implementation of the algorithm described in the paper, 'A Method for Automatically Animating Children's Drawings of the Human Figure'.\"\n        })]\n      })\n    }), \"\\n\", _jsxs(Content, {\n      spaceTop: true,\n      spaceBottom: true,\n      children: [_jsx(_components.h1, {\n        children: \"Animated Drawings\"\n      }), _jsx(_components.p, {\n        children: \"This repo contains an implementation of the algorithm described in the paper, `A Method for Automatically Animating Children's Drawings of the Human Figure' (currenly under peer review).\"\n      }), _jsxs(_components.p, {\n        children: [\"In addition, this repo aims to be a useful creative tool in its own right, allowing you to flexibly create animations starring your own drawn characters. If you do create something fun with this, let us know! Use hashtag \", _jsx(_components.strong, {\n          children: \"#fairanimateddrawings\"\n        })]\n      })]\n    }), \"\\n\", _jsxs(Content, {\n      spaceBottom: true,\n      children: [_jsx(_components.h2, {\n        children: \"Installation\"\n      }), _jsxs(_components.p, {\n        children: [\"We \", _jsx(_components.em, {\n          children: \"strongly\"\n        }), \" recommend activating a Python virtual environment prior to installing Animated Drawings.\\nConda's Miniconda is a great choice. Follow \", _jsx(_components.a, {\n          href: \"https://conda.io/projects/conda/en/stable/user-guide/install/index.html\",\n          children: \"these steps\"\n        }), \" to download and install it. Then run the following commands:\"]\n      }), _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# create and activate the virtual environment\"\n          }), \"\\nconda create --name animated_drawings \", _jsx(_components.span, {\n            className: \"token assign-left variable\",\n            children: \"python\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3.8\"\n          }), \".13\\nconda activate animated_drawings\\n\\n\", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# clone AnimatedDrawings and use pip to install\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"git\"\n          }), \" clone git@github.com:fairinternal/AnimatedDrawings.git\\n\", _jsx(_components.span, {\n            className: \"token builtin class-name\",\n            children: \"cd\"\n          }), \" AnimatedDrawings\\npip \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"install\"\n          }), \" -e \", _jsx(_components.span, {\n            className: \"token builtin class-name\",\n            children: \".\"\n          }), \"\\n\"]\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you get a \", _jsx(_components.code, {\n          children: \"permission denied\"\n        }), \" error when trying to clone the repo, you don't have access.\\nTo get permission, follow the instructions on \", _jsx(_components.a, {\n          href: \"https://www.internalfb.com/intern/wiki/FAIR/Platforms/Getting_started/fairinternal-github/\",\n          children: \"this page\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"Mac M1/M2 users: if you get architecture errors, make sure your \", _jsx(_components.code, {\n          children: \"~/.condarc\"\n        }), \" does not have \", _jsx(_components.code, {\n          children: \"osx-64\"\n        }), \", but only \", _jsx(_components.code, {\n          children: \"osx-arm64\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"noarch\"\n        }), \" in its subdirs listing. You can see that it's going to go sideways as early as \", _jsx(_components.code, {\n          children: \"conda create\"\n        }), \" because it will show \", _jsx(_components.code, {\n          children: \"osx-64\"\n        }), \" instead of \", _jsx(_components.code, {\n          children: \"osx-arm64\"\n        }), \" versions of libraries under \\\"The following NEW packages will be INSTALLED\\\".\"]\n      })]\n    }), \"\\n\", _jsxs(Content, {\n      spaceBottom: true,\n      children: [_jsx(_components.h2, {\n        children: \"Using Animated Drawings\"\n      }), _jsx(Spacer, {}), _jsx(_components.h3, {\n        children: \"Interactive Window\"\n      }), _jsxs(_components.p, {\n        children: [\"We provide some example top-level configuration files (or 'mvc_configs') to demonstrate how to run the rendering code.\\nScenes are created and rendered according to the parameters within the mvc_config.\\nTo see for yourself, make sure that the \", _jsx(_components.code, {\n          children: \"animated_drawings\"\n        }), \" virtual environment is activated, then launch a Python interpreter from within the AnimatedDrawings root directory and run the following commands:\"]\n      }), _jsx(_components.pre, {\n        className: \"language-python\",\n        children: _jsxs(_components.code, {\n          className: \"language-python\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" animated_drawings \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" render\\nrender\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"start\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./examples/config/mvc/interactive_window_example.yaml'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.p, {\n        children: \"If everything is installed correctly, an interactive window should appear on your screen.\\n(Use spacebar to pause/unpause the scene, arrow keys to move back and forth in time, and q to close the screen.)\"\n      }), _jsx(Image, {\n        url: \"/assets/images/interactive_window_example.gif\"\n      })]\n    }), \"\\n\", _jsxs(Content, {\n      color: \"red-50\",\n      spaceTop: true,\n      children: [_jsx(_components.h3, {\n        children: \"Adding multiple characters to scene\"\n      }), _jsx(_components.p, {\n        children: \"Multiple characters can be added to a video by specifying multiple entries within the mvc-config scene's 'ANIMATED_CHARACTERS' list.\\nTo see for yourself, run the following python commands from within the AnimatedDrawings root directory:\"\n      }), _jsx(_components.pre, {\n        className: \"language-python\",\n        children: _jsxs(_components.code, {\n          className: \"language-python\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" animated_drawings \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" render\\nrender\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"start\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./examples/config/mvc/multiple_characters_example.yaml'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(Gallery, {\n      columns: 3,\n      color: \"red-50\",\n      spaceBottom: true,\n      children: [_jsx(Image, {\n        url: \"/assets/images/char1.png\"\n      }), _jsx(Image, {\n        url: \"/assets/images/char2.png\"\n      }), _jsx(Image, {\n        url: \"/assets/images/multiple_characters_example.gif\"\n      })]\n    }), \"\\n\", _jsxs(Content, {\n      color: \"red-50\",\n      spaceTop: true,\n      children: [_jsx(_components.h3, {\n        children: \"Adding a background image\"\n      }), _jsx(_components.p, {\n        children: \"Suppose you'd like to add a background to the animation. You can do so by specifying the image path within the config.\\nRun the following commands from a Python interpreter within the AnimatedDrawings root directory:\"\n      }), _jsx(_components.pre, {\n        className: \"language-python\",\n        children: _jsxs(_components.code, {\n          className: \"language-python\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" animated_drawings \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" render\\nrender\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"start\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./examples/config/mvc/background_example.yaml'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(Gallery, {\n      columns: 2,\n      color: \"red-50\",\n      spaceBottom: true,\n      children: [_jsx(Image, {\n        url: \"/assets/images/char4_original_image.png\"\n      }), _jsx(Image, {\n        url: \"/assets/images/background_example.gif\"\n      })]\n    }), \"\\n\", _jsxs(Content, {\n      color: \"red-50\",\n      spaceTop: true,\n      children: [_jsx(_components.h3, {\n        children: \"Want to learn more?\"\n      }), _jsx(_components.p, {\n        children: \"For more information, see the GitHub Repo.\"\n      })]\n    }), \"\\n\", _jsxs(Content, {\n      spaceTop: true,\n      spaceBottom: true,\n      children: [_jsx(_components.h2, {\n        children: \"Give feedback\"\n      }), _jsxs(_components.p, {\n        children: [\"This project is in an early stage. Please give feedback. We would love to see what you make with this too. If you do create something fun with this, let us know! Use hashtag \", _jsx(_components.strong, {\n          children: \"#fairanimateddrawings\"\n        })]\n      })]\n    }), \"\\n\", _jsx(Footer, {\n      columns: true,\n      children: _jsx(\"div\", {\n        children: _jsx(_components.p, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/fairinternal/AnimatedDrawings/\",\n            children: _jsx(_components.strong, {\n              children: \"Animated Drawings\"\n            })\n          })\n        })\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"currentMetaData":{"title":"Home","order":0,"id":"home"},"allMetaData":[{"id":"home","title":"Home","order":0},{"id":"paper","title":"Paper","order":1},{"id":"dataset","title":"Dataset","order":2}]},"__N_SSG":true}